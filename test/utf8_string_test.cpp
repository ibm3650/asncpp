//
// Created by kandu on 06.01.2025.
//

#include <array>
#include <gtest/gtest.h>
#include "asncpp/utf8_string.h"


static const std::vector<std::pair<std::vector<uint8_t>, std::u8string_view> > test_cases = {
    {
        {0x0C, 13, 'H', 'e', 'l', 'l', 'o', ',', ' ', 0xE4, 0xB8, 0x96, 0xE7, 0x95, 0x8C},
        u8"Hello, ‰∏ñÁïå"
    }
};


//std::vector<std::pair<std::vector<uint8_t>, std::u16string_view> > bmp_string_invalid = {
//    {
//        {0x1E, 0x05, 0x00, 0x48, 0x00, 0x65, 0x00}, // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: –û—à–∏–±–∫–∞ - –¥–ª–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ 5, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ
//        u"He" // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "He" (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
//    },
//    {
//        {0x1E, 0x06, 0x00, 0x48, 0x00, 0x65, 0x00, 0x6C, 0xD8, 0x00},
//        // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: –û—à–∏–±–∫–∞ - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π UTF-16 surrogate
//        u"Hel" // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "Hel" (–æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ)
//    },
//    {
//        {0x1E, 0x03, 0x00, 0xC3, 0x00}, // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: –û—à–∏–±–∫–∞ - –Ω–µ–ø–æ–ª–Ω–∞—è –ø–∞—Ä–∞ –±–∞–π—Ç
//        u"\u00C3" // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "\u00C3" (–æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ)
//    }
//};


// std::vector<std::pair<std::vector<uint8_t>, std::string>> test_data = {
//     // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//     // {
//     //     {0x1C, 0x08, 0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64}, // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: UniversalString "abcd"
//     //     {0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64}              // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "abcd" std::u32string original = U"Test: ‚òÄÔ∏èüåôüåü";
//     // },
//     // {
//     //         {0x1E, 0x06, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43},             // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: BMPString "ABC"
//     //         {0x00, 0x41, 0x00, 0x42, 0x00, 0x43}                          // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "ABC"
//     // },
//     {
//             {0x1A, 0x05, 0x48, 0x65, 0x6C, 0x6C, 0x6F},                  // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: PrintableString "Hello"
//             "Hello"                               // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "Hello"
//     },
//
//     // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//     // {
//     //         {0x1C, 0x04, 0x61, 0x00, 0x62, 0x00},                        // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: –û—à–∏–±–∫–∞ - –¥–ª–∏–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞
//     //         {0x61, 0x00, 0x62, 0x00}                                     // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "a\0b\0"
//     // },
//     // {
//     //         {0x1E, 0x08, 0x00, 0x41, 0x00, 0x42, 0x43},                  // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: –û—à–∏–±–∫–∞ - –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
//     //         {0x00, 0x41, 0x00, 0x42, 0x43}                               // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "A\0BC" (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BMPString)
//     // },
//   //  {
//             // {0x1A, 0x06, 0x48, 0x65, 0x6C, 0x6C, 0x6F},                  // –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: –û—à–∏–±–∫–∞ - –¥–ª–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ
//             // "Hello"                               // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "Hello"
//  //   }
// };

TEST(utf8_string_test, encode) {
    for (const auto &[encoded_expected, expected]: test_cases) {
        utf8_string_t obj(expected);
        const std::vector<uint8_t> encoded = serialize(&obj);
        EXPECT_EQ(encoded, encoded_expected);
    }
    // const char data[] = {0x1F, 0x1F, 0x08, '2', '0', '2', '2', '1', '2', '2', '5'};
    // visible_string_t const date_obj(data);
    // const char32_t data1[] = {0x1F, 0x1F, 0x08, '2', '0', '2', '2', '1', '2', '2', '5'};
    // //universal_string_t date_o7bj(data1);
}
//
TEST(utf8_string_test, decode) {
    for (const auto &[encoded, expected]: test_cases) {
        const auto deserialized = asncpp::base::deserialize_v(encoded);
        const utf8_string_t *ptr = dynamic_cast<utf8_string_t *>(deserialized.get());
        EXPECT_EQ(ptr->value(), expected);
    }
}